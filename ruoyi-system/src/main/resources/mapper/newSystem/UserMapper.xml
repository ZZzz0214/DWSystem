<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.UserMapper">

	<resultMap type="com.ruoyi.common.core.domain.newEntity.User" id="UserResultMap">
		<id property="userId" column="user_id"/>
		<result property="userName" column="user_name"/>
		<result property="password" column="password"/>
		<result property="nickName" column="nick_name"/>
		<result property="sex" column="sex"/>
		<result property="avatar" column="avatar"/>
		<result property="status" column="status"/>
		<result property="delFlag"   column="del_flag" />
		<result property="loginIp" column="login_ip"/>
		<result property="loginDate" column="login_date"/>
		<result property="createBy"     column="create_by"    />
		<result property="createTime"   column="create_time"  />
		<result property="updateBy"     column="update_by"    />
		<result property="updateTime"   column="update_time"  />
		<result property="beiZhu" column="bei_zhu"/>
		<collection  property="roles"   javaType="java.util.List"  resultMap="RoleResult" />
	</resultMap>

	<resultMap id="RoleResult" type="com.ruoyi.common.core.domain.newEntity.Role">
		<id     property="roleId"       column="role_id"        />
		<result property="roleName"     column="role_name"      />
		<result property="roleKey"      column="role_key"       />
		<result property="roleSort"     column="role_sort"      />
		<result property="dataScope"    column="data_scope"     />
		<result property="status"       column="role_status"    />
	</resultMap>

	<sql id="selectUserVo">
		select u.user_id, u.user_name, u.nick_name, u.avatar, u.password, u.sex, u.status, u.del_flag, u.login_ip, u.login_date, u.create_by, u.create_time, u.bei_zhu,
			   r.role_id, r.role_name, r.role_key, r.role_sort, r.data_scope, r.status as role_status
		from sys_user u
				 left join sys_user_role ur on u.user_id = ur.user_id
				 left join sys_role r on r.role_id = ur.role_id
	</sql>

	<select id="selectUserList" parameterType="com.ruoyi.common.core.domain.newEntity.User" resultMap="UserResultMap">
	select user_id,user_name,password,nick_name,sex,avatar,status,del_flag,login_ip,login_date,bei_zhu,create_by,create_time from sys_user u
	where u.del_flag='0'
		<if test="userId != null and userId != 0">
			AND u.user_id = #{userId}
		</if>
		<if test="nickName != null and nickName != ''">
			AND u.nick_name like concat('%', #{nickName}, '%')
		</if>
		<if test="status != null and status != ''">
			AND u.status = #{status}
		</if>
		<if test="params.beginTime != null and params.beginTime != ''"><!-- 开始时间检索 -->
			AND date_format(u.create_time,'%y%m%d') &gt;= date_format(#{params.beginTime},'%y%m%d')
		</if>
		<if test="params.endTime != null and params.endTime != ''"><!-- 结束时间检索 -->
			AND date_format(u.create_time,'%y%m%d') &lt;= date_format(#{params.endTime},'%y%m%d')
		</if>
		<!-- 数据范围过滤 -->
		${params.dataScope}
	</select>

	<select id="selectUserByUserName" parameterType="String" resultMap="UserResultMap">
		<include refid="selectUserVo"/>
		where u.user_name = #{userName} and u.del_flag ='0'
	</select>

	<select id="selectUserById" parameterType="Long" resultMap="UserResultMap">
		<include refid="selectUserVo"/>
		where u.user_id = #{userId}
	</select>
	<insert id="insertUser" parameterType="com.ruoyi.common.core.domain.newEntity.User" useGeneratedKeys="true" keyProperty="userId">
		INSERT INTO sys_user (
		<if test="userId != null and userId != 0">user_id,</if>
		<if test="userName != null and userName != ''">user_name,</if>
		<if test="password != null and password != ''">password,</if>
		<if test="nickName != null and nickName != ''">nick_name,</if>
		<if test="sex != null and sex != ''">sex,</if>
		<if test="avatar != null and avatar != ''">avatar,</if>
		<if test="status != null and status != ''">status,</if>
		<if test="loginIp != null and loginIp != ''">login_ip,</if>
		<if test="loginDate != null">login_date,</if>
		<if test="createBy != null and createBy != ''">create_by,</if>
		<if test="beiZhu != null and beiZhu != ''">bei_zhu,</if>
		create_time
		) VALUES (
		<if test="userId != null and userId != 0">#{userId},</if>
		<if test="userName != null and userName != ''">#{userName},</if>
		<if test="password != null and password != ''">#{password},</if>
		<if test="nickName != null and nickName != ''">#{nickName},</if>
		<if test="sex != null and sex != ''">#{sex},</if>
		<if test="avatar != null and avatar != ''">#{avatar},</if>
		<if test="status != null and status != ''">#{status},</if>
		<if test="loginIp != null and loginIp != ''">#{loginIp},</if>
		<if test="loginDate != null">#{loginDate},</if>
		<if test="createBy != null and createBy != ''">#{createBy},</if>
		<if test="beiZhu != null and beiZhu != ''">#{beiZhu},</if>
		sysdate()
		)
	</insert>

	<update id="updateUser" parameterType="com.ruoyi.common.core.domain.newEntity.User">
		UPDATE sys_user
		<set>
			<if test="userName != null and userName != ''">user_name = #{userName},</if>
			<if test="password != null and password != ''">password = #{password},</if>
			<if test="nickName != null and nickName != ''">nick_name = #{nickName},</if>
			<if test="sex != null and sex != ''">sex = #{sex},</if>
			<if test="avatar != null and avatar != ''">avatar = #{avatar},</if>
			<if test="status != null and status != ''">status = #{status},</if>
			<if test="loginIp != null and loginIp != ''">login_ip = #{loginIp},</if>
			<if test="loginDate != null">login_date = #{loginDate},</if>
			<if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
			<if test="beiZhu != null and beiZhu != ''">bei_zhu = #{beiZhu}</if>
			update_time = sysdate()
		</set>
		WHERE user_id = #{userId}
	</update>

	<update id="updateUserAvatar" parameterType="SysUser">
		update sys_user set avatar = #{avatar} where user_name = #{userName}
	</update>

	<update id="updateUserStatus" parameterType="SysUser">
		update sys_user set status = #{status} where user_id = #{userId}
	</update>


	<update id="resetUserPwd" parameterType="SysUser">
		update sys_user set password = #{password} where user_name = #{userName}
	</update>

	<delete id="deleteUserById" parameterType="long">
		update sys_user set del_flag = '2' where user_id = #{userId}
	</delete>

	<delete id="deleteUserByIds" parameterType="Long">
		update sys_user set del_flag = '2' where user_id in
		<foreach collection="array" item="userId" open="(" separator="," close=")">
			#{userId}
		</foreach>
	</delete>

	<select id="checkUserNameUnique" parameterType="String" resultMap="UserResultMap">
		select user_id, user_name from sys_user where user_name = #{userName}  limit 1
	</select>


</mapper> 